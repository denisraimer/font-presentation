{"version":3,"sources":["components/NavigationBar.js","components/Footer.js","components/TextEditor.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Nav","className","Link","href","Footer","TextEditor","placeholder","App","Form","Group","controlId","Control","type","Label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAqBeA,EAlBO,WAClB,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAACF,EAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,kBAACJ,EAAA,EAAOK,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,qDACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,sEACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,sDACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,8CACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,kDACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,WCDLC,EAXA,WACX,OACI,yBAAKH,UAAU,UACX,yBAAKA,UAAU,kBAAf,ipB,QCQGI,EAXI,WACf,OACI,yBAAKJ,UAAU,eACX,8BACIK,YAAY,mIAEZ,UAAU,mBC4BXC,MA9Bf,WACI,OACI,yBAAKN,UAAU,QACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBACX,kBAACO,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAClB,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,UACnB,kBAACJ,EAAA,EAAKK,MAAN,8CAEJ,kBAACL,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,UACnB,kBAACJ,EAAA,EAAKK,MAAN,sDAIZ,yBAAKZ,UAAU,OAAf,4DAGR,kBAAC,EAAD,MACA,yBAAKA,UAAU,eAEnB,kBAAC,EAAD,QCnBQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71dabf96.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Nav, Navbar} from \"react-bootstrap\";\r\n\r\nconst NavigationBar = () => {\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#home\">О ПРОЕКТЕ</Nav.Link>\r\n                    <Nav.Link href=\"#link\">ВЫСКАЗАТЬСЯ</Nav.Link>\r\n                    <Nav.Link href=\"#link\">ФОНТ ИН ЮЗ</Nav.Link>\r\n                    <Nav.Link href=\"#link\">МАГАЗИН</Nav.Link>\r\n                    <Nav.Link href=\"#link\">КОРЗИНА (0)</Nav.Link>\r\n                    <Nav.Link href=\"#link\">ENG</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavigationBar\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className='footer'>\r\n            <div className='marquee-stroke'>\r\n                ВНИМАНИЕ! САЙТ СОДЕРЖИТ НЕНОРМАТИВНУЮ ЛЕКСИКУ (И ПОСВЯЩЕН ЕЙ) • 18+ • ВНИМАНИЕ! САЙТ СОДЕРЖИТ\r\n                НЕНОРМАТИВНУЮ ЛЕКСИКУ (И ПОСВЯЩЕН ЕЙ)\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from \"react\";\r\n\r\nconst TextEditor = () => {\r\n    return (\r\n        <div className='text-editor'>\r\n            <textarea\r\n                placeholder=\"ЗДЕСЬ МОЖНО МАТЕРИТЬСЯ \"\r\n                className='form-control'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextEditor\r\n","import React from 'react';\r\nimport NavigationBar from './components/NavigationBar';\r\nimport Footer from './components/Footer';\r\nimport {Form} from 'react-bootstrap';\r\nimport TextEditor from './components/TextEditor';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className='main'>\r\n            <NavigationBar/>\r\n            <div className='content'>\r\n                <div className='sidebar'>\r\n                    <div className='sidebar-content'>\r\n                        <div className='font-setting'>\r\n                            <Form>\r\n                                <Form.Group controlId='formBasicSize'>\r\n                                    <Form.Control type='range'/>\r\n                                    <Form.Label>Размер</Form.Label>\r\n                                </Form.Group>\r\n                                <Form.Group controlId='formRangeCensored'>\r\n                                    <Form.Control type='range'/>\r\n                                    <Form.Label>Цензура</Form.Label>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </div>\r\n                        <div className='btn'>Сохранить</div>\r\n                    </div>\r\n                </div>\r\n                <TextEditor />\r\n                <div className='copyright'/>\r\n            </div>\r\n            <Footer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './assets/style/bootstrap-skins.css';\r\nimport './assets/style/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}